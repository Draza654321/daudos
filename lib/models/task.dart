enum TaskPriority { high, medium, low }

enum TaskCategory { work, personal, health, learning, finance, social, creative, maintenance }

enum TaskStatus { pending, inProgress, completed, cancelled }

class Task {
  final String id;
  final String userId;
  final String title;
  final String? description;
  final TaskPriority priority;
  final TaskCategory category;
  final TaskStatus status;
  final bool isAutoGenerated;
  final DateTime? dueDate;
  final DateTime? completedAt;
  final int? estimatedMinutes;
  final int? actualMinutes;
  final DateTime createdAt;
  final DateTime updatedAt;

  Task({
    required this.id,
    required this.userId,
    required this.title,
    this.description,
    required this.priority,
    required this.category,
    required this.status,
    required this.isAutoGenerated,
    this.dueDate,
    this.completedAt,
    this.estimatedMinutes,
    this.actualMinutes,
    required this.createdAt,
    required this.updatedAt,
  });

  bool get isCompleted => status == TaskStatus.completed;
  bool get isOverdue => dueDate != null && 
                       dueDate!.isBefore(DateTime.now()) && 
                       !isCompleted;

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'title': title,
      'description': description,
      'priority': priority.name,
      'category': category.name,
      'status': status.name,
      'isAutoGenerated': isAutoGenerated,
      'dueDate': dueDate?.toIso8601String(),
      'completedAt': completedAt?.toIso8601String(),
      'estimatedMinutes': estimatedMinutes,
      'actualMinutes': actualMinutes,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }

  factory Task.fromJson(Map<String, dynamic> json) {
    return Task(
      id: json['id'],
      userId: json['userId'],
      title: json['title'],
      description: json['description'],
      priority: TaskPriority.values.firstWhere((e) => e.name == json['priority']),
      category: TaskCategory.values.firstWhere((e) => e.name == json['category']),
      status: TaskStatus.values.firstWhere((e) => e.name == json['status']),
      isAutoGenerated: json['isAutoGenerated'],
      dueDate: json['dueDate'] != null ? DateTime.parse(json['dueDate']) : null,
      completedAt: json['completedAt'] != null ? DateTime.parse(json['completedAt']) : null,
      estimatedMinutes: json['estimatedMinutes'],
      actualMinutes: json['actualMinutes'],
      createdAt: DateTime.parse(json['createdAt']),
      updatedAt: DateTime.parse(json['updatedAt']),
    );
  }

  Task copyWith({
    String? id,
    String? userId,
    String? title,
    String? description,
    TaskPriority? priority,
    TaskCategory? category,
    TaskStatus? status,
    bool? isAutoGenerated,
    DateTime? dueDate,
    DateTime? completedAt,
    int? estimatedMinutes,
    int? actualMinutes,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return Task(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      description: description ?? this.description,
      priority: priority ?? this.priority,
      category: category ?? this.category,
      status: status ?? this.status,
      isAutoGenerated: isAutoGenerated ?? this.isAutoGenerated,
      dueDate: dueDate ?? this.dueDate,
      completedAt: completedAt ?? this.completedAt,
      estimatedMinutes: estimatedMinutes ?? this.estimatedMinutes,
      actualMinutes: actualMinutes ?? this.actualMinutes,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}

