import '../models/task.dart';
import 'database_service.dart';
import 'firebase_service.dart';

class TaskRepository {
  final DatabaseService _databaseService = DatabaseService();
  final FirebaseService _firebaseService = FirebaseService();

  // Create task
  Future<void> createTask(Task task) async {
    final data = task.toJson();
    await _databaseService.insert('tasks', data);
    await _firebaseService.syncRecord('tasks', task.id, data, 'INSERT');
  }

  // Get task by ID
  Future<Task?> getTaskById(String id) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'id = ?',
      whereArgs: [id],
    );
    
    if (results.isNotEmpty) {
      return Task.fromJson(results.first);
    }
    return null;
  }

  // Get tasks for user
  Future<List<Task>> getTasksForUser(String userId, {TaskStatus? status, int? limit}) async {
    String whereClause = 'userId = ?';
    List<dynamic> whereArgs = [userId];
    
    if (status != null) {
      whereClause += ' AND status = ?';
      whereArgs.add(status.name);
    }
    
    final results = await _databaseService.query(
      'tasks',
      where: whereClause,
      whereArgs: whereArgs,
      orderBy: 'createdAt DESC',
      limit: limit,
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get tasks by category
  Future<List<Task>> getTasksByCategory(String userId, TaskCategory category) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND category = ?',
      whereArgs: [userId, category.name],
      orderBy: 'createdAt DESC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get tasks by priority
  Future<List<Task>> getTasksByPriority(String userId, TaskPriority priority) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND priority = ?',
      whereArgs: [userId, priority.name],
      orderBy: 'createdAt DESC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get pending tasks
  Future<List<Task>> getPendingTasks(String userId) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND status IN (?, ?)',
      whereArgs: [userId, TaskStatus.pending.name, TaskStatus.inProgress.name],
      orderBy: 'priority DESC, dueDate ASC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get completed tasks
  Future<List<Task>> getCompletedTasks(String userId, {DateTime? startDate, DateTime? endDate}) async {
    String whereClause = 'userId = ? AND status = ?';
    List<dynamic> whereArgs = [userId, TaskStatus.completed.name];
    
    if (startDate != null && endDate != null) {
      whereClause += ' AND completedAt >= ? AND completedAt <= ?';
      whereArgs.addAll([startDate.toIso8601String(), endDate.toIso8601String()]);
    }
    
    final results = await _databaseService.query(
      'tasks',
      where: whereClause,
      whereArgs: whereArgs,
      orderBy: 'completedAt DESC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get overdue tasks
  Future<List<Task>> getOverdueTasks(String userId) async {
    final now = DateTime.now().toIso8601String();
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND dueDate < ? AND status NOT IN (?, ?)',
      whereArgs: [userId, now, TaskStatus.completed.name, TaskStatus.cancelled.name],
      orderBy: 'dueDate ASC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Get auto-generated tasks
  Future<List<Task>> getAutoGeneratedTasks(String userId) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND isAutoGenerated = 1',
      whereArgs: [userId],
      orderBy: 'createdAt DESC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Update task
  Future<void> updateTask(Task task) async {
    final data = task.toJson();
    await _databaseService.update(
      'tasks',
      data,
      'id = ?',
      [task.id],
    );
    await _firebaseService.syncRecord('tasks', task.id, data, 'UPDATE');
  }

  // Complete task
  Future<void> completeTask(String taskId, {int? actualMinutes}) async {
    final task = await getTaskById(taskId);
    if (task != null) {
      final updatedTask = task.copyWith(
        status: TaskStatus.completed,
        completedAt: DateTime.now(),
        actualMinutes: actualMinutes,
        updatedAt: DateTime.now(),
      );
      await updateTask(updatedTask);
    }
  }

  // Delete task
  Future<void> deleteTask(String id) async {
    await _databaseService.delete('tasks', 'id = ?', [id]);
    await _firebaseService.syncRecord('tasks', id, {}, 'DELETE');
  }

  // Get task completion stats for date range
  Future<Map<String, int>> getTaskStats(String userId, DateTime startDate, DateTime endDate) async {
    final completedTasks = await getCompletedTasks(userId, startDate: startDate, endDate: endDate);
    final allTasks = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND createdAt >= ? AND createdAt <= ?',
      whereArgs: [userId, startDate.toIso8601String(), endDate.toIso8601String()],
    );
    
    return {
      'total': allTasks.length,
      'completed': completedTasks.length,
      'pending': allTasks.length - completedTasks.length,
    };
  }

  // Get tasks for today
  Future<List<Task>> getTodaysTasks(String userId) async {
    final today = DateTime.now();
    final startOfDay = DateTime(today.year, today.month, today.day);
    final endOfDay = startOfDay.add(Duration(days: 1));
    
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND ((dueDate >= ? AND dueDate < ?) OR (createdAt >= ? AND createdAt < ?))',
      whereArgs: [
        userId,
        startOfDay.toIso8601String(),
        endOfDay.toIso8601String(),
        startOfDay.toIso8601String(),
        endOfDay.toIso8601String(),
      ],
      orderBy: 'priority DESC, dueDate ASC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }

  // Search tasks
  Future<List<Task>> searchTasks(String userId, String query) async {
    final results = await _databaseService.query(
      'tasks',
      where: 'userId = ? AND (title LIKE ? OR description LIKE ?)',
      whereArgs: [userId, '%$query%', '%$query%'],
      orderBy: 'createdAt DESC',
    );
    
    return results.map((data) => Task.fromJson(data)).toList();
  }
}

